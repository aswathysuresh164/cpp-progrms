brute force approach - less efficient code

#include <bits/stdc++.h>

using namespace std;

   int remove_duplicate(int a[],int n){
        // code here
        set<int> s;
        for(int i=0;i<n;i++)
        {
            s.insert(a[i]);
            
        }
        return s.size();
    }

int main()
{
    cout<<"Remove duplicates from array\n";
    
    int a[]={1,1,2,2,4,8,8};
    int n=sizeof(a)/sizeof(a[0]);
    cout<<"n="<<n;
    cout<<"size of array after remove duplicates"<<remove_duplicate(a,n);

    return 0;
}

/////////////////////////////////////////////////////////////

Efficient code takes O(n) tc 


#include <bits/stdc++.h>

using namespace std;

   int remove_duplicate(int a[],int n){
        // code here
        int i=0;
       for(int j=1;j<n;j++)
       {
           if(a[j]!=a[i])
           {
               a[i+1]=a[j];
               i++;
           }
       }
       return i+1;
    }

int main()
{
    cout<<"Remove duplicates from the sorted  array\n";
    
    int a[]={1,1,2,2,4};
    int n=sizeof(a)/sizeof(a[0]);
    cout<<"n="<<n;
    cout<<"size of array after remove duplicates"<<remove_duplicate(a,n);

    return 0;
}
